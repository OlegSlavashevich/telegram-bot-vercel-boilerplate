import { Context, Markup, Telegraf } from 'telegraf';

import { VercelRequest, VercelResponse } from '@vercel/node';
import { development, production } from './core';
import { ObjectId } from 'mongodb';
import OpenAI from 'openai';
import { db, connectToMongo } from './db';
import { ChatCompletionContentPart, ChatCompletionMessageParam } from 'openai/resources';
import { randomUUID } from 'crypto';
import { message } from 'telegraf/filters';
import axios from 'axios';

interface UserProfile {
  _id?: ObjectId;
  userId: number;
  username?: string;
  subscription: 'free' | 'premium';
  dailyRequests: number;
  lastResetDate: Date;
  subscriptionExpiryDate?: Date | undefined;
}

interface Invoice {
  _id?: ObjectId;
  invoice_id: string;
  user_id: number;
  amount: number;
  title: string;
  description: string;
  payload: string;
  created_at: Date;
}

interface Payment {
  _id?: ObjectId;
  payment_id: string;
  invoice_id: string;
  user_id: number;
  amount: number;
  status: 'pending' | 'completed' | 'refunded';
  created_at: Date;
}


const BOT_TOKEN = process.env.BOT_TOKEN || '';
const ENVIRONMENT = process.env.NODE_ENV || '';

const bot = new Telegraf(BOT_TOKEN);

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
  defaultHeaders: {
    'X-Title': 'Telegram GPT Bot'
  }
});

const MAX_CONTEXT_MESSAGES = 8;
const STREAM_CHUNK_SIZE = 100;
const FREE_DAILY_LIMIT = 10;
const PREMIUM_DAILY_LIMIT = 100;
const PREMIUM_PRICE = 1; // –¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (10 –ú–ë –≤ –±–∞–π—Ç–∞—Ö)
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10 MB

async function getChatHistory(userId: number): Promise<Array<{ role: 'system' | 'user' | 'assistant', content: string }>> {
  const chats = db.collection('chats');
  const history = await chats.find({ userId }).sort({ timestamp: -1 }).limit(MAX_CONTEXT_MESSAGES).toArray();
  return history.map(msg => ({ 
    role: msg.role as 'system' | 'user' | 'assistant', 
    content: msg.content 
  })).reverse();
}

async function saveChatMessage(userId: number, role: 'system' | 'user' | 'assistant', content: string) {
  const chats = db.collection('chats');
  await chats.insertOne({ 
    userId, 
    role, 
    content, 
    timestamp: new Date() 
  });
}

function estimateTokens(text: string): number {
  return Math.ceil(text.length / 4);
}

async function sendToOpenRouterStream(userId: number, prompt: string | Array<ChatCompletionContentPart>, ctx: Context): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const user = await getUserProfile(userId);
    const model = user.subscription === 'premium' ? 'gpt-4o' : 'gpt-4o-mini';

    const history = await getChatHistory(userId);
    const messages: ChatCompletionMessageParam[] = [
      ...history.map(msg => ({
        role: msg.role as 'system' | 'user' | 'assistant',
        content: msg.content
      })),
      { role: 'user', content: prompt }
    ];

    let totalResponseTokens = 0;
    let responseChunk = '';
    let sentMessage: any;

    const stream = await openai.chat.completions.create({
      model: model, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
      messages: messages,
      stream: true,
      temperature: 0.7,
      max_tokens: user.subscription === 'premium' ? 4000 : 2000, // –†–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    });

    for await (const part of stream) {
      const content = part.choices[0]?.delta?.content || '';
      responseChunk += content;

      if (responseChunk.length >= STREAM_CHUNK_SIZE || content.includes('\n')) {
        if (sentMessage) {
          await ctx.telegram.editMessageText(
            ctx.chat!.id,
            sentMessage.message_id,
            undefined,
            sentMessage.text + responseChunk
          );
          sentMessage.text += responseChunk;
        } else {
          sentMessage = await ctx.reply(responseChunk);
        }
        responseChunk = '';
      }

      if (part.usage?.total_tokens) {
        totalResponseTokens = part.usage.total_tokens;
      }
    }

    if (responseChunk) {
      if (sentMessage) {
        await ctx.telegram.editMessageText(
          ctx.chat!.id,
          sentMessage.message_id,
          undefined,
          sentMessage.text + responseChunk
        );
      } else {
        await ctx.reply(responseChunk);
      }
    }

    const fullResponse = sentMessage ? sentMessage.text + responseChunk : responseChunk;
    await saveChatMessage(userId, 'assistant', fullResponse);

    if (totalResponseTokens === 0) {
      totalResponseTokens = estimateTokens(fullResponse);
    }

    await updateTokenUsage(userId, estimateTokens(prompt as string), totalResponseTokens);
  } catch (error) {
    console.error('Error calling OpenRouter:', error);
    await ctx.reply('Sorry, there was an error processing your request.');
  }
}

async function updateTokenUsage(userId: number, inputTokens: number, outputTokens: number) {
  const stats = db.collection('user_stats');
  await stats.updateOne(
    { userId },
    { 
      $inc: { 
        totalInputTokens: inputTokens, 
        totalOutputTokens: outputTokens 
      } 
    },
    { upsert: true }
  );
}

async function checkAndUpdateSubscriptionStatus(userId: number, ctx?: Context): Promise<void> {
  const users = db.collection<UserProfile>('users');
  const user = await users.findOne({ userId });
  
  if (!user) return;

  if (user.subscription === 'premium' && user.subscriptionExpiryDate) {
    const now = new Date();
    if (now > user.subscriptionExpiryDate) {
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ free
      await users.updateOne(
        { userId },
        { 
          $set: { 
            subscription: 'free',
            subscriptionExpiryDate: undefined
          } 
        }
      );

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (ctx) {
        await ctx.reply(
          '–í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! üò¢\n' +
          '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏, ' +
          '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /pay',
          Markup.inlineKeyboard([
            Markup.button.callback('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'buy_premium')
          ])
        );
      }
    }
  }
}

async function getUserProfile(userId: number, username?: string): Promise<UserProfile> {
  await checkAndUpdateSubscriptionStatus(userId);
  
  const users = db.collection<UserProfile>('users');
  let user = await users.findOne({ userId });
  
  if (!user) {
    const newUser: UserProfile = {
      userId,
      username,
      subscription: 'free',
      dailyRequests: 0,
      lastResetDate: new Date(),
    };
    const result = await users.insertOne(newUser);
    newUser._id = result.insertedId;
    return newUser;
  }
  
  if (username && username !== user.username) {
    await users.updateOne(
      { userId },
      { $set: { username } }
    );
    user.username = username;
  }
  
  return user;
}

async function updateUserRequests(userId: number): Promise<boolean> {
  await checkAndUpdateSubscriptionStatus(userId);
  
  const users = db.collection<UserProfile>('users');
  const user = await getUserProfile(userId);
  
  const now = new Date();
  const resetTime = new Date(user.lastResetDate.getTime() + 24 * 60 * 60 * 1000); // lastResetDate + 24 —á–∞—Å–∞
  
  if (now >= resetTime) {
    // –ü—Ä–æ—à–ª–æ 24 —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞
    await users.updateOne(
      { userId }, 
      { 
        $set: { 
          dailyRequests: 1, 
          lastResetDate: now 
        } 
      }
    );
    return true;
  }
  
  const limit = user.subscription === 'premium' ? PREMIUM_DAILY_LIMIT : FREE_DAILY_LIMIT;
  if (user.dailyRequests >= limit) {
    return false;
  }
  
  await users.updateOne({ userId }, { $inc: { dailyRequests: 1 } });
  return true;
}

async function resetUserContext(userId: number) {
  const chats = db.collection('chats');
  await chats.deleteMany({ userId });
}

async function cancelSubscription(userId: number): Promise<boolean> {
  const users = db.collection<UserProfile>('users');
  const result = await users.updateOne(
    { userId },
    { 
      $set: { 
        subscription: 'free',
        subscriptionExpiryDate: undefined
      } 
    }
  );
  return result.modifiedCount > 0;
}

async function createInvoice(userId: number): Promise<Invoice> {
  const invoices = db.collection<Invoice>('invoices');
  const invoice: Invoice = {
    invoice_id: randomUUID(),
    user_id: userId,
    amount: PREMIUM_PRICE,
    title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
    description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π',
    payload: randomUUID(),
    created_at: new Date()
  };
  
  await invoices.insertOne(invoice);
  return invoice;
}

async function createPayment(paymentData: any): Promise<Payment> {
  const payments = db.collection<Payment>('payments');
  const payment: Payment = {
    payment_id: paymentData.telegram_payment_charge_id,
    invoice_id: paymentData.invoice_id,
    user_id: paymentData.user_id,
    amount: paymentData.total_amount,
    status: 'completed',
    created_at: new Date()
  };
  
  await payments.insertOne(payment);
  return payment;
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
async function checkPremiumStatus(userId: number, ctx: Context): Promise<boolean> {
  const user = await getUserProfile(userId);
  
  if (user.subscription === 'premium') {
    const expiryDate = user.subscriptionExpiryDate;
    await ctx.reply(
      '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!' +
      (expiryDate ? `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ ${expiryDate.toLocaleString('ru-RU', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        timeZone: 'Europe/Moscow'
      })}` : '')
    );
    return true;
  }
  return false;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
async function sendSubscriptionInvoice(userId: number, ctx: Context): Promise<void> {
  const invoice = await createInvoice(userId);
  
  try {
    await ctx.telegram.sendInvoice(ctx.chat!.id, {
      title: invoice.title,
      description: invoice.description,
      payload: invoice.payload,
      provider_token: "",
      currency: 'XTR',
      prices: [{ 
        label: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞', 
        amount: PREMIUM_PRICE
      }],
    });
  } catch (error) {
    console.error('Error sending invoice:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

bot.command('start', async (ctx) => {
  const username = ctx.from.username;
  await getUserProfile(ctx.from.id, username);
  const welcomeMessage = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI –±–æ—Ç–∞!

–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:
1. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π: ${FREE_DAILY_LIMIT} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
2. –ü—Ä–µ–º–∏—É–º: ${PREMIUM_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, TXT, CSV, JSON)
‚Ä¢ –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ–ª–µ–µ –º–æ—â–Ω–æ–π –º–æ–¥–µ–ª–∏

–¶–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏: ${PREMIUM_PRICE} ‚≠ê

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏.
  `;

  const keyboard = Markup.keyboard([
    [Markup.button.text('/profile'), Markup.button.text('/pay')],
    [Markup.button.text('/reset'), Markup.button.text('/help')]
  ]).resize();

  ctx.reply(welcomeMessage, keyboard);
});

bot.command('profile', async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  await checkAndUpdateSubscriptionStatus(userId, ctx);
  const user = await getUserProfile(userId, username);
  const nextReset = new Date(user.lastResetDate);
  nextReset.setDate(nextReset.getDate() + 1);
  
  let subscriptionInfo = `–ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription}`;
  if (user.subscription === 'premium') {
    subscriptionInfo += '\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_subscription';
  } else {
    subscriptionInfo += '\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /pay';
  }
  
  const profileMessage = `
–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å (/profile).
ID: ${userId}
Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
${subscriptionInfo}

–õ–∏–º–∏—Ç—ã
–æ—Å—Ç–∞–ª–æ—Å—å ${user.subscription === 'premium' ? PREMIUM_DAILY_LIMIT - user.dailyRequests : FREE_DAILY_LIMIT - user.dailyRequests}/${user.subscription === 'premium' ? PREMIUM_DAILY_LIMIT : FREE_DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: ${nextReset.toLocaleString('ru-RU', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', timeZone: 'Europe/Moscow' })} (–º—Å–∫)
  `;
  
  ctx.reply(profileMessage);
});

bot.command('pay', async (ctx) => {
  const userId = ctx.from!.id;
  const hasPremium = await checkPremiumStatus(userId, ctx);
  if (!hasPremium) {
    await sendSubscriptionInvoice(userId, ctx);
  }
});

bot.command('reset', async (ctx) => {
  const userId = ctx.from.id;
  await resetUserContext(userId);
  ctx.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.');
});

bot.command('help', (ctx) => {
  const helpMessage = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã
/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/pay - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
/cancel_subscription - –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
  `;

  const keyboard = Markup.keyboard([
    [Markup.button.text('/profile'), Markup.button.text('/pay')],
    [Markup.button.text('/cancel_subscription'), Markup.button.text('/reset')],
    [Markup.button.text('/help')]
  ]).resize();

  ctx.reply(helpMessage, keyboard);
});

bot.command('cancel_subscription', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserProfile(userId);

  if (user.subscription !== 'premium') {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏.');
    return;
  }

  const cancelled = await cancelSubscription(userId);
  if (cancelled) {
    await ctx.reply('–í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.');
  } else {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
});

bot.on(message('text'), async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  const userMessage = ctx.message.text;
  console.log('Received message:', userMessage);

  try {
    await checkAndUpdateSubscriptionStatus(userId, ctx);
    const canMakeRequest = await updateUserRequests(userId);
    if (!canMakeRequest) {
      const user = await getUserProfile(userId, username);
      if (user.subscription === 'free') {
        await ctx.reply('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É?', 
          Markup.inlineKeyboard([Markup.button.callback('–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º', 'buy_premium')]));
      } else {
        await ctx.reply('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.');
      }
      return;
    }

    await saveChatMessage(userId, 'user', userMessage);
    await sendToOpenRouterStream(userId, userMessage, ctx);
  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

bot.on('pre_checkout_query', async (ctx) => {
  const { id, invoice_payload } = ctx.preCheckoutQuery;
  try {
    const invoice = await db.collection<Invoice>('invoices').findOne({ payload: invoice_payload });
    if (!invoice) {
      await ctx.answerPreCheckoutQuery(false, '–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    await ctx.answerPreCheckoutQuery(true);
  } catch (error) {
    console.error('Pre-checkout error:', error);
    await ctx.answerPreCheckoutQuery(false, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
  }
});

bot.on('successful_payment', async (ctx) => {
  const payment = ctx.message?.successful_payment;
  if (!payment) return;

  try {
    const invoice = await db.collection<Invoice>('invoices').findOne({ 
      payload: payment.invoice_payload 
    });
    
    if (!invoice) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }

    await createPayment({
      payment_id: payment.telegram_payment_charge_id,
      invoice_id: invoice.invoice_id,
      user_id: ctx.from.id,
      amount: payment.total_amount,
      status: 'completed',
      created_at: new Date()
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
    const users = db.collection<UserProfile>('users');
    const expiryDate = new Date();
    expiryDate.setDate(expiryDate.getDate() + 30);

    await users.updateOne(
      { userId: ctx.from.id },
      { 
        $set: { 
          subscription: 'premium',
          subscriptionExpiryDate: expiryDate
        } 
      }
    );

    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à–∞ —Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.');
  } catch (error) {
    console.error('Payment processing error:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —ç—Ç–∏–º.');
  }
});

bot.action('buy_premium', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from!.id;
  const hasPremium = await checkPremiumStatus(userId, ctx);
  if (!hasPremium) {
    await sendSubscriptionInvoice(userId, ctx);
  }
});

bot.telegram.setMyCommands([
  { command: 'start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã' },
  { command: 'profile', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
  { command: 'pay', description: '–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É' },
  { command: 'cancel_subscription', description: '–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É' },
  { command: 'reset', description: '–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞' },
  { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏' }
]);

//prod mode (Vercel)
export const startVercel = async (req: VercelRequest, res: VercelResponse) => {
  await connectToMongo();
  await production(req, res, bot);
};
//dev mode
ENVIRONMENT !== 'production' && development(bot);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ç–æ
bot.on(message('document'), async (ctx) => {
  console.log('document upload');
  await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∏—á–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.');
  return;

  // const userId = ctx.from.id;
  // const username = ctx.from.username;
  // const user = await getUserProfile(userId, username);

  // // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
  // if (user.subscription !== 'premium') {
  //   await ctx.reply(
  //     '–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
  //     '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?',
  //     Markup.inlineKeyboard([
  //       Markup.button.callback('–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º', 'buy_premium')
  //     ])
  //   );
  //   return;
  // }

  // const document = ctx.message.document;
  
  // // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  // if (document.file_size && document.file_size > MAX_FILE_SIZE) {
  //   await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (10 –ú–ë).');
  //   return;
  // }

  // const caption = ctx.message.caption || '';

  // try {
  //   await checkAndUpdateSubscriptionStatus(userId, ctx);
  //   const canMakeRequest = await updateUserRequests(userId);
  //   if (!canMakeRequest) {
  //     await ctx.reply('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.');
  //     return;
  //   }

  //   // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
  //   const file = await ctx.telegram.getFile(document.file_id);
  //   const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;

  //   // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ caption
  //   const fileInfo = `[–§–∞–π–ª: ${document.file_name} (${document.mime_type})]`;
  //   const messageForHistory = caption ? `${caption}` : fileInfo;
  //   await saveChatMessage(userId, 'user', messageForHistory);

  //   // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  //   const fileContent = await processFileContent(fileUrl, document.file_name as string);

  //   // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
  //   const prompt = caption 
  //     ? `User Prompt: ${caption}\n\nFile Content: ${fileContent}`
  //     : `Please analyze this file: ${fileContent}`;

  //   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å
  //   const response = await sendToOpenRouterStream(userId, prompt, ctx);
  // } catch (error) {
  //   console.error('Error processing file:', error);
  //   await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.');
  // }
});

bot.on(message('photo'), async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  const user = await getUserProfile(userId, username);

  // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
  if (user.subscription !== 'premium') {
    await ctx.reply(
      '–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
      '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?',
      Markup.inlineKeyboard([
        Markup.button.callback('–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º', 'buy_premium')
      ])
    );
    return;
  }

  const photos = ctx.message.photo;
  const largestPhoto = photos[photos.length - 1];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
  if (largestPhoto.file_size && largestPhoto.file_size > MAX_FILE_SIZE) {
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π (10 –ú–ë).');
    return;
  }

  const caption = ctx.message.caption || '';

  try {
    await checkAndUpdateSubscriptionStatus(userId, ctx);
    const canMakeRequest = await updateUserRequests(userId);
    if (!canMakeRequest) {
      await ctx.reply('–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞.');
      return;
    }

    // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const photo = photos[photos.length - 1];
    const file = await ctx.telegram.getFile(photo.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –∏ caption
    const messageForHistory = caption ? caption: "–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ";
    await saveChatMessage(userId, 'user', messageForHistory);

    console.log(fileUrl);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    const prompt = [
      { type: "text", text: caption },
      {
        type: "image_url",
        image_url: {
          "url": fileUrl,
        },
      },
    ] as ChatCompletionContentPart[];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å
    await sendToOpenRouterStream(userId, prompt, ctx);
  } catch (error) {
    console.error('Error processing photo:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
async function processFileContent(fileUrl: string, fileName: string): Promise<string> {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(response.data);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const extension = fileName.split('.').pop()?.toLowerCase();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    switch (extension) {
      case 'txt':
        return buffer.toString('utf-8');
        
      case 'json':
        return JSON.stringify(JSON.parse(buffer.toString('utf-8')), null, 2);
        
      case 'csv':
        return buffer.toString('utf-8');
        
      case 'pdf':
        // –î–ª—è PDF –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pdf-parse
        const pdfParse = require('pdf-parse');
        const data = await pdfParse(buffer);
        return data.text;
        
      case 'docx':
        // –î–ª—è DOCX –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mammoth
        const mammoth = require('mammoth');
        const result = await mammoth.extractRawText({ buffer });
        return result.value;
        
      default:
        return buffer.toString('utf-8');
    }
  } catch (error) {
    console.error('Error processing file:', error);
    throw new Error('Failed to process file content');
  }
}

